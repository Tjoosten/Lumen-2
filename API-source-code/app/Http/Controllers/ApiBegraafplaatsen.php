<?phpnamespace App\Http\Controllers;use App\Models\Graven;use App\Http\Controllers\Controller;use League\Fractal\Manager;use League\Fractal\Resource\Collection;use League\Fractal\Pagination\Cursor;use Illuminate\Http\Response;use Request;class ApiBegraafplaatsen extends CallbackGraveyards{    private $fractal;    public function __construct()    {        $this->fractal = new Manager();    }    /**     * @api             {get} /graveyards/all get all the graveyards.     * @apiname         graveyards (all)     * @apiDescription  Get a all the graveyards.     * @apiGroup        Graveyards     * @apiPermission   none     * @apiVersion      1.0.0     *     * @apiExample Usage (example):     * curl -i http://www.domain.com/graveyards/all     *     * @apiError        {Boolean}   error    Error detection.     * @apiError        {String}    message  Error Message.     */    public function graveyards()    {        if ($currentCursorStr = Request::input('cursor', false)) {            $Soldaten = Graven::where('id', '>', $currentCursorStr)->take(5)->get();        } else {            $Soldaten = Graven::take(5)->get();        }        $prevCursorStr = Request::input('prevCursor', 6);        $newCursorStr = $Soldaten->last()->id;        $cursor = new Cursor($currentCursorStr, $prevCursorStr, $newCursorStr, $Soldaten->count());        $resource = new Collection($Soldaten, $this->transformGraveyard());        $resource->setCursor($cursor);        if ($Soldaten->count() > 0) {            $content = $this->fractal->createData($resource)->toJson();            $status = 200;            $mime = 'application/json';        } elseif ($Soldaten->count() < 0) {            $content = ['message' => 'Could not find any graveyards.' ];            $status = 200;            $mime = 'applocation/json';        }        $response = response($content, $status);        $response->header('Content-Type', $mime);        return $response;    }    /**     * @api             {get} /graveyard/{id} get a specific graveyard.     * @apiname         graveyards (specific)     * @apiDescription  Get a specific graveyard.     * @apiGroup        Graveyards     * @apiPermission   none     * @apiVersion      1.0.0     *     * @apiExample Usage (example):     * curl -i http://www.domain.com/graveyard/33     *     * @apiErrorExample Error response:     *     HTTP/1.1 4xx Not Authenticated     *     {     *       "error": true,     *       "message": "No graveyard found".     *     }     *     * @apiError        {Boolean}   error    Error detection.     * @apiError        {String}    message  Error Message.     */    public function graveyard($id)    {        $graveyard = Graven::where('id', $id)->get();        $dbResult = new Collection($graveyard, $this->transformGraveyard());        if (count($graveyard) === 0) {            $content = $this->transformNoGraveyard();            $status = 200; // Successfull request.            $mime = 'application/json';        } else {            $content = $this->fractal->createData($dbResult)->toJson();            $status = 200; // Successfull request.            $mime = 'application/json';        }        $response = response($content, $status);        $response->header('Content-Type', $mime);        return $response;    }    /**     * @api     * @apiName     * @apiDescription     * @apiGroup     * @apiPermission     * @apiVersion     *     * @apiParam     */    public function UpdateGraveyard($id)    {        $graveyard = new Graven;        $graveyard->Begraafplaats = Request::get('Begraafplaats');        $graveyard->Lengtegraad   = Request::get('Lengtegraad');        $graveyard->Breedtegraad  = Request::get('Breedtegraad');        $graveyard->Type          = Request::get('Type');        $graveyard->save();        if ($graveyard->count() === 0) {            $mime    = 'application/json';            $status  = 200; // Successfull request.            $content = $this->transformErrorUpdate();        } elseif($graveyard->count() > 0) {            $mime    = 'application/json';            $status  = 200; // Successfull request.            $content = $this->transformSuccessUpdate();        }        $response = response($content, $status);        $response->header($mime);        return $response;    }    /**     * @api             {get} /regiments/all get all the graveyards.     * @apiName         graveyards (all)     * @apiDescription  Insert a new graveyard.     * @apiGroup        Graveyards     * @apiPermission   Admin     * @apiVersion      1.0.0     *     * @apiParam      {string}   Begraafplaats  The name of the graveyard.     * @apiParam      {string}   Lengtegraad    De lengtegrazad van de begraafplaats.     * @apiParam      {string}   Breedtegraad   De breedtegraad van de begraafplaats     * @apiParam      {String}   Type           Het type begraafplaats.     */    public function InsertGraveyard()    {        $graveyards = new Graven;        $graveyards->Begraafplaats = Request::get('Begraafplaats');        $graveyards->Lengtegraad   = Request::get('Lengtegraad');        $graveyards->Breedtegraad  = Request::get('Breedtegraad');        $graveyards->Type          = Request::get('Type');        $graveyards->save();        if ($graveyards->count() === 0) {            $mime    = 'application/json';            $status  = 200; // Successfull request.            $content = [ 'message' => 'Could not add the graveyard.' ];        } elseif($graveyards->count() > 0) {            $mime    = 'application/json';            $status  = 200; // Successfull request.            $content = [ 'message' => 'Graveyard successfull added.' ];        }        $response = response($content, $status);        $response->header($mime);        return $response;    }    /**     * @api     * @apiName     * @apiDescription     * @apiGroup     * @apiPermission     * @apiVersion     *     * @apiParam     */    public function DeleteGraveyard($id)    {        $begraafplaats = Graven::where('id', '=', $id);        $begraafplaats->delete();        if ($begraafplaats->count() === 0) {            $mime    = 'application/json';            $status  = 200; // Successfull request.            $content = '';        } elseif($begraafplaats->count() > 1) {            $mime    = 'application/json';            $status  = 400; // Bad request.            $content = '';        }        $response = response($content, $status);        $response->header($mime);        return $response;    }}